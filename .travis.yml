sudo: false
dist: trusty
language: cpp
compiler:
  - gcc
  - clang
before_install:
  - lsb_release -c;
  - lsb_release -r;
  - which $CXX
  - which $CC
addons:
  apt:
    packages:
      - g++
      - clang
      - libboost-dev
      - libboost-tools-dev
      - libboost-test-dev
# Uncomment the following to enable coveralls support.
#install:
#  - sudo pip install cpp-coveralls;

before_script:
  - ! 'echo ''project yaul-tml :
                requirements
                <include>include
                <toolset>gcc:<cxxflags>-std=c++11
                <toolset>gcc:<cxxflags>-Wextra
                <toolset>gcc:<cxxflags>-pedantic
                <toolset>clang:<cxxflags>-std=c++11
                <toolset>clang:<cxxflags>-Wextra
                <toolset>clang:<cxxflags>-pedantic
                :
                build-dir bin.v2 ;'' > Jamroot'
  - $CXX --version;
  - $CXX -dumpversion;
  - which $CXX
  - which $CC

script:
  - bjam toolset=$CC -d+2 -a test example
  - bjam toolset=$CC -d+2 -a test test

# Uncomment the following block to enable code coverage support.
#after_success:
#    GCOV=gcov-`$CXX -dumpversion | sed -e 's/^\([0-9]\+\.[0-9]\+\).*$/\1/'`;
#    which $GCOV || GCOV="";
#    echo "gcov: $GCOV";
#    if [ ! -z "$GCOV" ]; then
#      coveralls --gcov $GCOV --gcov-options '\-p \-l' -b . -r . -e .git
#                 -e CMakeFiles -e docs -e /usr;
#    fi

# Use after_failure to reveal *.log files that were generated during config
# phase and so on. We should print to console as much information as we can,
# to quickly find the cause of a failure.
#after_failure:
#  - ...
